After electric:
- ecto: remove ROS_ELECTRIC_FOUND (everywhere in the code) and rosbuild_lite
- OpenCV: replace OpenCV_LIBS by OpenCV_LIBRARIES
- remove roscompat

Build:
- no default build of tutorials
- no default build of tests
- split the tests (db tests should at least be separated)

Interface:
- --all should also have a --missing. Fix missing, object_names
- meshing should support --all, --missing, --object_ids
- autogeneration of parameter files:autogenerate if it does not exist
- normalize source parameters.  training and detection use a config file, everything else uses args...
- All apps should support the sources? ros kinect, ros bag, openni
- add an 'any' cell type in the config file

Performance:
- SBA
- RANSAC
- Mike's stuff

DB:
- move to a system dependency with python-couchdb after Electric (dropping Lucid support)
- delete things from the DB, find orphans, find missing components (models ...), find duplicates
- better object representation (model, inline images, 3d models ...)
  - HTML - see the model_viewer under apps. Its a couch app, we can make it do whatever.
           Currently have something for viewing the meshes, and something for viewing the objects.
- be able to only replicate models in a DB (to put on the PR2)
- add meta data that is missing (meet with everybody). We want: timestamp of the session, the sensor id
- use a single view for all model types
- is models.py obsolete?
- fix meshing so that it uses current db interface
- make more db manipulation scripts apps/dbscripts ... FIXME don't break these.

Capture:
- SBA should be a blackbox for pose adjustment: maybe in capture, or in TOD training
- GUI for capturing obejcts on a dot pattern: the current box is hacky
- upload through the capture GUI. Also have the triggering of all the other models (RabbitMQ ...)
- should be a parameter file for the type of fiducials
- unify the different Kinect calls to use the Kinect source (grep for /camera/depth)

Doc:
- API docs

New cells:
- masks, filters
- Mike's stuff

Test:
- have something for performance. Use NIST.
- be able to train and test on the same bag
- ground truth format?  Look at NIST CSV.  Possibly come up with bag format too, where each frame has a listing of object id and pose relative to the sensor
- ground truth capture... Use the NIST Ponoko rig to capture scenes with GT poses. Needs a simple app or something.
- fix tests in /test that are unused
