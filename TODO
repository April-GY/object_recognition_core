After electric:
- ecto: remove ROS_ELECTRIC_FOUND (everywhere in the code) and rosbuild_lite

Build:
- no default build of tutorials
- no default build of tests
- split the tests (db tests should at least be separated)

Interface:
- --all should also have a --missing. Fix missing, object_names
- meshing should support --all, --missing, --object_ids
- autogeneration of parameter files:autogenerate if it does not exist
- normalize source parameters.  training and detection use a config file, everything else uses args...

Performance:
- Mike's stuff

DB:
- move to a system dependency with python-couchdb after Electric (dropping Lucid support)
- delete things from the DB, find orphans, find missing components (models ...), find duplicates
- better object representation (model, inline images, 3d models ...)
  - HTML - see the model_viewer under apps. Its a couch app, we can make it do whatever.
           Currently have something for viewing the meshes, and something for viewing the objects.
- be able to only replicate models in a DB (to put on the PR2)
- add meta data that is missing (meet with everybody). We want: timestamp of the session, the sensor id
- use a single view for all model types
- is models.py obsolete?
- fix meshing so that it uses current db interface
- make more db manipulation scripts apps/dbscripts ... FIXME don't break these.

Capture:
- SBA should be a blackbox for pose adjustment: maybe in capture, or in TOD training
- GUI for capturing obejcts on a dot pattern: the current box is hacky
- upload through the capture GUI. Also have the triggering of all the other models (RabbitMQ ...)
- should be a parameter file for the type of fiducials
- unify the different Kinect calls to use the Kinect source (grep for /camera/depth)

Doc:
- API docs

New cells:
- masks, filters
- Mike's stuff

Test:
- have something for performance. Use NIST.
- ground truth format?  Look at NIST CSV.  Possibly come up with bag format too, where each frame has a listing of object id and pose relative to the sensor
- ground truth capture... Use the NIST Ponoko rig to capture scenes with GT poses. Needs a simple app or something.
- fix tests in /test that are unused
















I find http://ecto.willowgarage.com/links/ecto/reference/index.html confusing.  It would be nice  to have a single page laying out “here is the list of things required to set up an ecto pipeline”.  Right now, I have to infer what that list is from the tutorials, which are all toy examples.
ecto needs documentation about what it’s good for (GUI, graph, %, auto runtime docs)
(ROS) logging everything happening between the Python launch and when the plasm starts
more unittests on config file/command line arguments
explain Python for ecto (__init__.py)
shuffle techniques in the ecto docs
 David:  Another suggestion I'd have for the tutorials & reference: the names of the links don't really tell you what you get there, a one-sentence explanatory text for each one would b e great (like on http://www.ros.org/wiki/ROS/Tutorials)
David: 
I want you to know that I'm really on your side here. I'm just a
little hesitant because I think I don't have enough insight into the
workings of ecto yet to make qualified comments on some things. I can
only talk about what I perceive as a novice user with little
experience in Python and no experience at all in writing a Python
library in C++.

One thing you were bringing up several times was that stuff that is
"standard python" or standard whatever shouldn't be in the
documentation. I agree with that - however, you have to at least
mention it, so I know as a novice user what I should look at. If the
stance is "read a book on Python development and become a CMake expert
before you can even start to use ecto", I think that's not a good way
to sell this.

Regarding documentation, I think the basic tutorial should get a more
prominent position in the documentation. If I want to try out a new
library, that is the first thing I will do before reading any lengthy
prose about what are the motivations and what are all the interfaces
and all that technical chitchat. I just want to know how it feels like
to develop with that framework, so I can decide whether to use it,
before I invest lots of time on studying all it's intricacies. Also,
the basic tutorial should explain every single bit of what you need to
do to get this running - from setting up your CMakeLists.txt, your
evironment variables, compiling the code (yes, "mkdir build && cd
build && cmake .. && make"), and running it in Python. It should also
explain what files are created in the build folder on how they are
related to the code line "import ecto.tutorial as tutorial".

Some more general comments:


- Scattered throughout the documentation are small sentences that
suddenly make the whole thing appear unprofessional (e.g., by using
the words "outputish", "ecto beast" or "slime molds", or introducing
acronyms like "DAG" or "MoC" and never using them). If I get the
feeling that something has been hacked together by college kids, I
will not use it for anything related to my professional work.

Yesterday I stumbled upon OMPL, and I think they actually have a nice
landing page (http://ompl.kavrakilab.org/). I know, ecto is not in the
same league regarding how much manpower can be allocated for it, but
you can at least try.


document what a submethod is in ORK
add default DB parameters to the config_doc

make sure you can parametrize topics in soruce (for PR2 and:
/head_mount_kinect/rgb/image_color
/head_mount_kinect/rgb/camera_info
/head_mount_kinect/depth/camera_info
/head_mount_kinect/depth/image
)
