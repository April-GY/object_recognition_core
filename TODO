After electric:
- ecto: remove ROS_ELECTRIC_FOUND (everywhere in the code) and rosbuild_lite
- OpenCV: replace OpenCV_LIBS by OpenCV_LIBRARIES
- remove roscompat

Build:
- no default build of tutorials
- no default build of tests
- split the tests (db tests should at least be separated)

Interface:
- --all should also have a --missing. Fix missing, object_names
- meshing should support --all, --missing, --object_ids
- autogeneration of parameter files:autogenerate if it does not exist
- normalize source parameters.  training and detection use a config file, everything else uses args...
- All apps should support the sources? ros kinect, ros bag, openni
- add an 'any' cell type in the config file

Performance:
- SBA
- RANSAC
- Mike's stuff

DB:
- move to a system dependency with python-couchdb after Electric (dropping Lucid support)
- delete things from the DB, find orphans, find missing components (models ...), find duplicates
- better object representation (model, inline images, 3d models ...)
  - HTML - see the model_viewer under apps. Its a couch app, we can make it do whatever.
           Currently have something for viewing the meshes, and something for viewing the objects.
- be able to only replicate models in a DB (to put on the PR2)
- add meta data that is missing (meet with everybody). We want: timestamp of the session, the sensor id
- use a single view for all model types
- is models.py obsolete?
- fix meshing so that it uses current db interface
- make more db manipulation scripts apps/dbscripts ... FIXME don't break these.

Capture:
- SBA should be a blackbox for pose adjustment: maybe in capture, or in TOD training
- GUI for capturing obejcts on a dot pattern: the current box is hacky
- upload through the capture GUI. Also have the triggering of all the other models (RabbitMQ ...)
- should be a parameter file for the type of fiducials
- unify the different Kinect calls to use the Kinect source (grep for /camera/depth)

Doc:
- API docs

New cells:
- masks, filters
- Mike's stuff

Test:
- have something for performance. Use NIST.
- be able to train and test on the same bag
- ground truth format?  Look at NIST CSV.  Possibly come up with bag format too, where each frame has a listing of object id and pose relative to the sensor
- ground truth capture... Use the NIST Ponoko rig to capture scenes with GT poses. Needs a simple app or something.
- fix tests in /test that are unused
















more docs as always:
there is stuff explaining how to build a detection/training cell but nothing explaining why
nothing explaining how to write a custom sink/source (Mac needed that at some point)
more usage examples for the config file
explain better how to build/run stuff for somebody who does not know/want to read the catkin help (like ‘git catkin foreach git git pull’)
Bhaskara:
http://www.ros.org/wiki/ecto should point to something reasonable
Likewise, searching for ‘ecto’ on the ros wiki has a planning page as the top hit.  It’s completely unclear from the search results where to look for canonical ecto documentation.
The installation instructions don’t actually say what the deb for ecto is called, just that it exists
Would be nice to have doxygen-like links in the documentation
I find http://ecto.willowgarage.com/links/ecto/reference/index.html confusing.  It would be nice  to have a single page laying out “here is the list of things required to set up an ecto pipeline”.  Right now, I have to infer what that list is from the tutorials, which are all toy examples.
As I understand it, the “plasm” is the main computation graph, and so an important concept that should be well documented.  Instead, the reference page for plasm says: “from the Greek plasma, meaning “something formed or molded” Think ectoplasm or protoplasm. Leading naturally to slime molds.”  This does not fit the bill :)
mention the builtin tests people can add to their cells/config files to check their validity
mention that ORK does not need ROS
ecto needs documentation about what it’s good for (GUI, graph, %, auto runtime docs)
(ROS) logging everything happening between the Python launch and when the plasm starts
more unittests on config file/command line arguments
