#!/usr/bin/env python
from ecto_object_recognition import capture, tod_training
from object_recognition import models
from object_recognition.common.utils import json_helper
from object_recognition.common.utils.training_detection_args import read_arguments
from object_recognition.tod.trainer import Trainer as TodTrainer
import ecto

DEBUG = False

########################################################################################################################

if __name__ == '__main__':
    params, args, pipeline_params, do_display, db_dict, db = read_arguments(training=True)

    for object_id in params['object_ids']:
        object_id = object_id.encode('ascii')
        db_reader = capture.ObservationReader("db_reader", db_url=db_dict['root'])
        obs_ids = models.find_all_observations_for_object(db, object_id)
        if not obs_ids:
            print 'no observations found for object %s' % object_id
            continue

        # define the input and connect to it
        source_plasm = ecto.Plasm()
        observation_dealer = ecto.Dealer(tendril=db_reader.inputs.at('observation'), iterable=obs_ids)
        source_plasm.connect(observation_dealer[:] >> db_reader['observation'])

        main_plasm = ecto.Plasm()
        # connect to the model computation
        for pipeline_param in pipeline_params:
            #define the trainer
            if pipeline_param['type'] == 'TOD':
                trainer = TodTrainer(json_search_params=json_helper.dict_to_cpp_json_str(pipeline_param['search']),
                                     json_feature_descriptor_params=json_helper.dict_to_cpp_json_str(pipeline_param['feature_descriptor']),
                                     display=do_display, source=db_reader, source_plasm=source_plasm)
                # delete the previous models
                for model_id in models.find_model_for_object(db, object_id, 'TOD'):
                    db.delete(db.get(model_id))

            # define the output
            db_writer = tod_training.ModelInserter("db_writer", collection_models=db_dict['collection'],
                                        db_json_params=json_helper.dict_to_cpp_json_str(db_dict), object_id=object_id,
                                        model_json_params=json_helper.dict_to_cpp_json_str(pipeline_param))

            # connect the output
            main_plasm.connect(trainer['points', 'descriptors'] >> db_writer['points', 'descriptors'])

        if DEBUG:
            #render the DAG with dot
            print main_plasm.viz()
            ecto.view_plasm(main_plasm)

        print >> open('training.dot', 'wt'), main_plasm.viz()
        sched = ecto.schedulers.Singlethreaded(main_plasm)
        sched.execute(niter=1)
