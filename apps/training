#!/usr/bin/env python
from object_recognition_core.db import ObjectDb, ObjectDbParameters
from object_recognition_core.db import models
from object_recognition_core.utils.training_detection_args import read_arguments_training
from object_recognition_core.utils.find_classes import find_factories
from object_recognition_core.pipelines.training import TrainingPipeline
import ecto
import sys
DEBUG = False

if __name__ == '__main__':
    source_params, pipeline_params, sink_params, args = read_arguments_training()
    pipelines = find_factories([ pipeline_param['module'] for pipeline_param in pipeline_params.itervalues()],
                               TrainingPipeline) #map of string name to pipeline class

    for _pipeline_id, pipeline_param in pipeline_params.iteritems():
        pipeline = pipelines.get(pipeline_param['type'], False)
        if not pipeline:
            sys.stderr.write('Invalid pipeline name: %s\nMake sure that the pipeline type is defined by a TrainingPipeline class, in the name class function.\n' % pipeline_param['type'])
            sys.exit(-1)
        for object_id in pipeline_param['parameters']['object_ids']:
            print 'computing object_id: %s' % object_id
            object_id = object_id.encode('ascii')
            db_params = pipeline_param['parameters'].get('db', {})
            if not db_params:
                continue
            object_db = ObjectDb(db_params)
            db_params = ObjectDbParameters(db_params)
            session_ids = models.find_all_sessions_for_object(db_params, object_id)
            for session_id in session_ids:
                observation_ids = models.find_all_observations_for_session(db_params, session_id)
    
                if not observation_ids:
                    print >> sys.stderr, 'No observations found for (object,session): (%s,%s)' % (object_id, session_id)
                    continue

                #create a plasm using the TrainingPipeline interface.
                plasm = pipeline.train(object_id=object_id, session_ids=session_ids, observation_ids=observation_ids,
                                       subtype=pipeline_param.get('subtype', ''),
                                       pipeline_params=pipeline_param.get('parameters', {}), object_db=object_db,
                                       db_params=db_params, args=args)

                if DEBUG:
                    #render the DAG with dot
                    ecto.view_plasm(plasm)

                #we promise to only do on iteration of the training pipeline.
                sched = ecto.schedulers.Singlethreaded(plasm)
                sched.execute(niter=1)
