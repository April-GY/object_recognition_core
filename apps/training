#!/usr/bin/env python
"""
This script launches several training pipelines defined in a configuration file to train several models for several
objects
"""
from object_recognition_core.db import ObjectDb, ObjectDbParameters, models
from object_recognition_core.utils.find_classes import find_cells
from object_recognition_core.utils.training_detection_args import create_parser, read_arguments
import ecto
import sys
DEBUG = False

if __name__ == '__main__':
    parser = create_parser(do_training=True)
    args = parser.parse_args()
    ork_params, args = read_arguments(args)
    pipelines = find_cells([ pipeline_param['module'] for pipeline_param in pipeline_params.itervalues()])

    for _pipeline_id, pipeline_param in pipeline_params.iteritems():
        for object_id in pipeline_param['parameters']['object_ids']:
            print 'computing object_id: %s' % object_id
            object_id = object_id.encode('ascii')
            db_params = pipeline_param['parameters'].get('db', {})
            if not db_params:
                continue
            object_db = ObjectDb(db_params)
            db_params = ObjectDbParameters(db_params)
            session_ids = models.find_all_sessions_for_object(db_params, object_id)

            observation_ids = models.find_all_observations_for_session(db_params, session_id)

            if not observation_ids:
                print >> sys.stderr, 'No observations found for (object,session): (%s,%s)' % (object_id, session_id)
                continue

            # create a plasm using the TrainingPipeline interface.
            plasm = pipeline.train(object_id=object_id, session_ids=session_ids, observation_ids=observation_ids,
                                   subtype=pipeline_param.get('subtype', ''),
                                   pipeline_params=pipeline_param.get('parameters', {}), object_db=object_db,
                                   db_params=db_params, args=args)

            if DEBUG:
                # render the DAG with dot
                ecto.view_plasm(plasm)

            # we promise to only do on iteration of the training pipeline.
            plasm.execute(niter=1)
