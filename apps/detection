#!/usr/bin/env python
import roscompat
from object_recognition_core.pipelines.plasm import create_detection_plasm
from object_recognition_core.utils.training_detection_args import common_create_parser, read_arguments_detector
from ecto.opts import scheduler_options, run_plasm
import argparse

if __name__ == '__main__':
    # create an ORK parser (it is special as it can read from option files)
    parser = common_create_parser()

    # add ecto options
    scheduler_options(parser)

    # create the plasm that will run the detection
    source_params, pipeline_params, sink_params, voter_params, args = read_arguments_detector(parser)
    plasm = create_detection_plasm(source_params, pipeline_params, sink_params, voter_params)

    # run the detection plasm
    options = parser.parse_args()
    run_plasm(options, plasm)
